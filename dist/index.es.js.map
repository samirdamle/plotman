{"version":3,"file":"index.es.js","sources":["../node_modules/ts-deepmerge/dist/index.js","../src/index.ts"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// istanbul ignore next\r\nvar isObject = function (obj) {\r\n    if (typeof obj === \"object\" && obj !== null) {\r\n        if (typeof Object.getPrototypeOf === \"function\") {\r\n            var prototype = Object.getPrototypeOf(obj);\r\n            return prototype === Object.prototype || prototype === null;\r\n        }\r\n        return Object.prototype.toString.call(obj) === \"[object Object]\";\r\n    }\r\n    return false;\r\n};\r\nvar merge = function () {\r\n    var objects = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        objects[_i] = arguments[_i];\r\n    }\r\n    return objects.reduce(function (result, current) {\r\n        Object.keys(current).forEach(function (key) {\r\n            if (Array.isArray(result[key]) && Array.isArray(current[key])) {\r\n                result[key] = Array.from(new Set(result[key].concat(current[key])));\r\n            }\r\n            else if (isObject(result[key]) && isObject(current[key])) {\r\n                result[key] = merge(result[key], current[key]);\r\n            }\r\n            else {\r\n                result[key] = current[key];\r\n            }\r\n        });\r\n        return result;\r\n    }, {});\r\n};\r\nexports.default = merge;\r\n//# sourceMappingURL=index.js.map","import merge from 'ts-deepmerge'\n\ntype Config = {\n    width: number\n    height: number\n    margin: {\n        top: number\n        bottom: number\n        left: number\n        right: number\n    }\n}\n\nconst defaultConfig: Config = {\n    width: 800,\n    height: 800,\n    margin: {\n        top: 80,\n        bottom: 120,\n        left: 80,\n        right: 20,\n    },\n}\n\nfunction plotman(config: Config = defaultConfig) {\n    // config = { ...defaultConfig, ...config }\n    config = merge(defaultConfig, config)\n\n    function plot() {\n        console.log('config')\n        console.log(config)\n        const { width } = config\n        return width\n    }\n\n    function plotX() {}\n\n    function plotY() {}\n\n    return { plot, plotX, plotY }\n}\n\nexport { plotman }\nexport default plotman\n"],"names":["Object","defineProperty","exports","value","isObject","obj","getPrototypeOf","prototype","toString","call","merge","objects","_i","arguments","length","reduce","result","current","keys","forEach","key","Array","isArray","from","Set","concat","defaultConfig","width","height","margin","top","bottom","left","right","plotman","config","plot","console","log","plotX","plotY"],"mappings":"yBACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAEtD,IAAIC,EAAW,SAAUC,GACrB,GAAmB,iBAARA,GAA4B,OAARA,EAAc,CACzC,GAAqC,mBAA1BL,OAAOM,eAA+B,CAC7C,IAAIC,EAAYP,OAAOM,eAAeD,GACtC,OAAOE,IAAcP,OAAOO,WAA2B,OAAdA,EAE7C,MAA+C,oBAAxCP,OAAOO,UAAUC,SAASC,KAAKJ,GAE1C,OAAO,GAEPK,EAAQ,WAER,IADA,IAAIC,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAQC,GAAMC,UAAUD,GAE5B,OAAOD,EAAQI,QAAO,SAAUC,EAAQC,GAYpC,OAXAjB,OAAOkB,KAAKD,GAASE,SAAQ,SAAUC,GAC/BC,MAAMC,QAAQN,EAAOI,KAASC,MAAMC,QAAQL,EAAQG,IACpDJ,EAAOI,GAAOC,MAAME,KAAK,IAAIC,IAAIR,EAAOI,GAAKK,OAAOR,EAAQG,MAEvDhB,EAASY,EAAOI,KAAShB,EAASa,EAAQG,IAC/CJ,EAAOI,GAAOV,EAAMM,EAAOI,GAAMH,EAAQG,IAGzCJ,EAAOI,GAAOH,EAAQG,MAGvBJ,IACR,KAEPd,UAAkBQ,6HCpBZgB,EAAwB,CAC1BC,MAAO,IACPC,OAAQ,IACRC,OAAQ,CACJC,IAAK,GACLC,OAAQ,IACRC,KAAM,GACNC,MAAO,KAIf,SAASC,EAAQC,GAeb,oBAfaA,KAEbA,EAASzB,EAAMgB,EAAeS,GAavB,CAAEC,KAXT,WAII,OAHAC,QAAQC,IAAI,UACZD,QAAQC,IAAIH,GACMA,SAQPI,MAJf,aAIsBC,MAFtB"}